<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.xy.novelwebproject.dao.AuthorMapper">
		<resultMap id="allAuth" type="cn.xy.novelwebproject.bean.Author">
				<id property="nick_name" column="nick_name"/>
				<result property="sex" column="sex"/>
				<result property="subscriptions" column="subscriptions"/>
				<result property="collections" column="collections"/>
				<result property="concerns" column="concerns"/>
				<result property="fans" column="fans"/>
				<result property="headimage" column="headimage"/>
				<collection property="footmark" ofType="cn.xy.novelwebproject.bean.Footmarks">
						<result property="user_name" column="user_name"/>
						<result property="novle_name" column="novle_name"/>
						<result property="visit_time" column="visit_time"/>
				</collection>
				<collection property="works" ofType="cn.xy.novelwebproject.bean.Novel">
						<id property="book_name" column="book_name"/>
						<result property="book_author" column="book_author"/>
						<result property="book_state" column="book_state"/>
						<result property="book_words" column="book_words"/>
						<result property="book_intro" column="book_intro"/>
						<result property="update_time" column="update_time"/>
						<result property="monthly_tickets" column="monthly_tickets"/>
						<result property="total_hits" column="total_hits"/>
						<result property="monthly_hits" column="monthly_hits"/>
						<result property="weekly_hits" column="weekly_hits"/>
						<result property="daily_hits" column="daily_hits"/>
						<result property="total_collections" column="total_collections"/>
						<result property="monthly_collections" column="monthly_collections"/>
						<result property="weekly_collections" column="weekly_collections"/>
						<result property="daily_collections" column="daily_collections"/>
						<result property="downloads" column="downloads"/>
						<collection property="book_type" ofType="cn.xy.novelwebproject.bean.Noveltype">
								<result property="novel_name" column="book_name"/>
								<result property="type" column="type"/>
						</collection>
						<collection property="comments" ofType="cn.xy.novelwebproject.bean.Comment">
								<id property="id" column="cmid"/>
								<result property="comment_title" column="comment_title"/>
								<result property="comment_context" column="comment_context"/>
								<result property="comment_author" column="comment_author"/>
								<result property="comment_time" column="comment_time"/>
								<result property="comment_url" column="comment_url"/>
						</collection>
						<collection property="book_catalog" ofType="cn.xy.novelwebproject.bean.Catalog">
								<id column="id" property="id"/>
								<result property="novale_catalog" column="novale_catalog"/>
								<result property="novel_name" column="book_name"/>
								<result property="updatetime" column="updatetime"/>
						</collection>
				</collection>
		</resultMap>

		<select id="getAllAuth" resultMap="allAuth">
				SELECT au.nick_name,
					   au.sex,
					   au.subscriptions,
					   au.collections,
					   au.concerns,
					   au.fans,
					   au.headimage,
					   nv.book_name,
					   nv.book_state,
					   fm.user_name,
					   fm.novle_name,
					   fm.visit_time,
					   nv.book_author,
					   nv.book_words,
					   nv.book_intro,
					   nv.update_time,
					   nv.monthly_tickets,
					   nv.total_hits,
					   nv.monthly_hits,
					   nv.weekly_hits,
					   nv.daily_hits,
					   nv.total_collections,
					   nv.monthly_collections,
					   nv.weekly_collections,
					   nv.daily_collections,
					   nv.downloads,
					   cl.novale_catalog,
					   cl.novel_name clnovel_name,
					   cl.updatetime,
					   cm.id         cmid,
					   cm.comment_title,
					   cm.comment_context,
					   cm.comment_author,
					   cm.comment_time,
					   cm.comment_url,
					   ntp.id,
					   ntp.typename
				FROM author au
							 LEFT OUTER JOIN
					 author_work_novel awn ON au.works = awn.novel_author
							 LEFT OUTER JOIN
					 footmarks fm ON fm.user_name = au.footmark
							 LEFT OUTER JOIN
					 novel nv ON awn.novel_name = nv.book_name
							 LEFT OUTER JOIN
					 novel_type nt ON nv.book_name = nt.novel_name
							 LEFT OUTER JOIN
					 noveltype ntp ON nt.type = ntp.typename
							 LEFT OUTER JOIN
					 catalog cl ON nv.book_catalog = cl.novel_name
							 LEFT OUTER JOIN
					 novel_comments nc ON nv.comments = nc.novel_name
							 LEFT OUTER JOIN
					 usercomment cm ON nc.comment_id = cm.id
		</select>

		<resultMap id="selectAuthor_map" type="cn.xy.novelwebproject.bean.Author">
				<id property="nick_name" column="nick_name"/>
				<result property="sex" column="sex"/>
				<result property="subscriptions" column="subscriptions"/>
				<result property="collections" column="collections"/>
				<result property="concerns" column="concerns"/>
				<result property="fans" column="fans"/>
				<result property="password" column="password"/>
				<result property="headimage" column="headimage"/>
		</resultMap>

		<select id="selectAuthor" resultMap="selectAuthor_map" parameterType="String">
				<bind name="nname" value="'%'+_parameter+'%'"/>
				SELECT a.nick_name,a.sex,a.subscriptions,a.collections,a.concerns,a.fans,a.password from author a
				<where>
						<if test="_parameter!=null || _parameter!=''">
								nick_name LIKE #{nname}
						</if>
				</where>
		</select>

		<resultMap id="getAuthorWorks_map" type="cn.xy.novelwebproject.bean.Author">
				<id property="nick_name" column="nick_name"/>
				<collection property="works" ofType="cn.xy.novelwebproject.bean.Novel">
						<id property="book_name" column="book_name"/>
						<result column="book_words" jdbcType="INTEGER" property="book_words"/>
						<result property="update_time" column="update_time"/>
				</collection>
		</resultMap>

		<select id="getAuthorWorks" parameterType="String" resultMap="getAuthorWorks_map">
				SELECT author.nick_name, novel.book_name, novel.book_words, novel.update_time
				FROM author
							 INNER JOIN novel ON novel.book_author = author.nick_name
				WHERE author.nick_name = #{nick_name}
		</select>

		<select id="findAuthByNamePwd" parameterType="String" resultType="int">
				select count(*)
				from author
				where nick_name = #{arg0}
				  and password = #{arg1}
		</select>

		<update id="updatePasswordByName" parameterType="String">
				update author
				set password = #{arg1}
				where nick_name = #{arg0}
		</update>

		<update id="SetUserHeadImg" parameterType="String">
				update author
				set headimage = #{arg1}
				where nick_name = #{arg0}
		</update>

		<select id="findAuthorByName" parameterType="String" resultMap="selectAuthor_map">
				select *
				from author
				where nick_name = #{username}
		</select>

		<select id="getAuthAllMsg" resultMap="allAuth" parameterType="String">
				SELECT author.*,
					   footmarks.*,
					   novel.*,
					   novel_comments.*,
					   novel_type.*,
					   catalog.*
				FROM author
							 LEFT OUTER JOIN footmarks ON author.nick_name = footmarks.user_name
							 LEFT OUTER JOIN author_work_novel ON author.nick_name = author_work_novel.novel_author
							 INNER JOIN novel ON author_work_novel.novel_name = novel.book_name
							 LEFT OUTER JOIN novel_comments ON novel.book_name = novel_comments.novel_name
							 LEFT OUTER JOIN novel_type ON novel.book_name = novel_type.novel_name
							 LEFT OUTER JOIN catalog ON novel.book_name = catalog.novel_name
				WHERE author.nick_name = #{nick_name}
		</select>

		<update id="updateAuthWork" parameterType="String">
				update novel
				set book_intro = #{arg1},
					book_state = #{arg2}
				where book_name = #{arg0}
		</update>

		<!--		boolean addNovel(Novel novel);-->
		<insert id="addNovel" parameterType="cn.xy.novelwebproject.bean.Novel">
				insert into novel (book_name, book_type, book_author, book_state, book_words, book_intro, update_time)
				values (#{book_name}, #{book_name}, #{book_author}, #{book_state}, #{book_words}, #{book_intro},
						#{update_time})
		</insert>
		<!--		void addWork(String book_author, String book_name, Date date);-->
		<insert id="addWork" parameterType="String">
				insert into author_work_novel (novel_author, novel_name, creat_time)
				values (#{arg0}, #{arg1}, #{arg2})
		</insert>
		<!--		boolean addType(List<Noveltype> types);-->
		<insert id="addType" parameterType="list">
				insert into novel_type (novel_name, type) values
				<foreach collection="list" item="worktype" separator=",">
						(#{worktype.novel_name},#{worktype.type})
				</foreach>
		</insert>
		<!--		boolean addCatalog(String bookName, String catalogName, String time);-->
		<insert id="addCatalog" parameterType="String">
				insert into catalog (novel_name, novale_catalog, updatetime)
				values (#{arg0}, #{arg1}, #{arg2})
		</insert>
		<!--		boolean addCatalogContent(String bookName, String catalogName, String content);-->
		<insert id="addCatalogContent" parameterType="String">
				insert into
				<if test="arg3== '' ">catlog_content</if>
				<if test="arg3 != ''">catlog_content${arg3}</if>
				(novelname, catlogname, content) VALUES (#{arg0},#{arg1},#{arg2})
		</insert>
		<insert id="addNovelDB" parameterType="String">
				insert into novel_db (novel_name, db_id)
				VALUES (#{arg0}, #{arg1})
		</insert>
		<select id="findAllNovel" resultType="String">
				select novel.book_name
				from novel
		</select>
		<select id="selectNovelDB" parameterType="String" resultType="int">
				select db_id
				from novel_db
				where novel_name = #{bookName}
		</select>
		<!--		int selectWorkWords(String book_name);-->
		<select id="selectWorkWords" parameterType="String" resultType="int">
				SELECT n.book_words
				FROM novel n
				WHERE n.book_name = #{bookName}
		</select>
		<!--		void updateWorkWords(int words);-->
		<update id="updateWorkWords" parameterType="Object">
				update novel
				set book_words = #{arg0},
					update_time=#{arg1}
				where book_name = #{arg2}
		</update>
<!--		List<Noveltype> selectAllType();-->
		<select id="selectAllType" resultType="cn.xy.novelwebproject.bean.RootNovelType">
				select * from noveltype
		</select>
		<!--boolean updateCatalog(String novelName, String catalogName);-->
		<update id="updateCatalog" parameterType="String">
				update catalog set catalog.novale_catalog=#{arg1} where catalog.novel_name=#{arg0}
		</update>
		<!--boolean updateCatalogContent(String novelName, String catalogName, String content);-->
		<update id="updateCatalogContent" parameterType="String">
				update catlog_content set content = #{arg2} , catlogname = #{arg1} where novelname = #{arg0}
		</update>
		<!--String getCatalogContent(String novelName, String novelCatalog);-->
		<select id="getCatalogContent" parameterType="String" resultType="String">
				select  content from catlog_content where novelname=#{arg0} and catlogname=#{arg1}
		</select>
</mapper>