<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.xy.novelwebproject.dao.LoginAndRegistMapper">
    <resultMap id="AuthLogin_map" type="cn.xy.novelwebproject.bean.Author">
        <id property="nick_name" column="nick_name"></id>
        <result property="password" column="password"></result>
    </resultMap>
    <resultMap id="BaseResultMap" type="cn.xy.novelwebproject.bean.Reader">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Sat Jun 06 19:29:15 CST 2020.
        -->
        <id column="nick_name" jdbcType="VARCHAR" property="nick_name"/>
        <result column="sex" jdbcType="VARCHAR" property="sex"/>
        <result column="birthday" jdbcType="DATE" property="birthday"/>
        <result column="intro" jdbcType="VARCHAR" property="intro"/>
        <result column="address" jdbcType="VARCHAR" property="address"/>
        <result column="fans" jdbcType="INTEGER" property="fans"/>

        <result column="account_balance" jdbcType="INTEGER" property="account_balance"/>
        <result column="monthly_tickets" jdbcType="INTEGER" property="monthly_tickets"/>
        <result column="vip" jdbcType="INTEGER" property="vip"/>
        <result column="access" jdbcType="VARCHAR" property="access"/>
        <result column="headimage" jdbcType="VARCHAR" property="headimage"/>
        <result column="password" property="password"/>
    </resultMap>
    <select id="AuthLogin" resultMap="AuthLogin_map" parameterType="cn.xy.novelwebproject.bean.Author">
        select nick_name,password from author where nick_name=#{nick_name} and password = #{password}
    </select>

    <resultMap id="ReaderLogin_map" type="cn.xy.novelwebproject.bean.Reader">
        <id property="nick_name" column="nick_name"></id>
        <result property="password" column="password"></result>
    </resultMap>
    <select id="ReaderLogin" parameterType="cn.xy.novelwebproject.bean.Author" resultMap="ReaderLogin_map">
        select nick_name,password from readers where nick_name=#{nick_name} and password = #{password}
    </select>

    <insert id="AuthRegist" parameterType="cn.xy.novelwebproject.bean.Author" keyProperty="nick_name" useGeneratedKeys="true">
            insert into author (nick_name,password) values (#{nick_name},#{password})
    </insert>

    <insert id="ReaderRegist" parameterType="cn.xy.novelwebproject.bean.Reader" keyProperty="nick_name" useGeneratedKeys="true">
            insert into readers (nick_name,password) values (#{nick_name},#{password})
    </insert>

    <select id="selectByReaderKey" parameterType="String" resultMap="BaseResultMap">
        SELECT readers.nick_name,readers.sex,readers.birthday,readers.intro,readers.address,readers.fans,readers.account_balance,readers.monthly_tickets,readers.vip,readers.access,readers.headimage,readers.password
        from readers where nick_name = #{nick_name}
    </select>

    <resultMap id="allAuth" type="cn.xy.novelwebproject.bean.Author">
        <id property="nick_name" column="nick_name"/>
        <result property="sex" column="sex"/>
        <result property="subscriptions" column="subscriptions"/>
        <result property="collections" column="collections"/>
        <result property="concerns" column="concerns"/>
        <result property="fans" column="fans"/>
        <result property="password" column="password"/>
        <collection property="footmark" ofType="cn.xy.novelwebproject.bean.Footmarks">
            <result property="user_name" column="user_name"/>
            <result property="novle_name" column="novle_name"/>
            <result property="visit_time" column="visit_time"/>
        </collection>
        <collection property="works" ofType="cn.xy.novelwebproject.bean.Novel">
            <id property="book_name" column="book_name"/>
            <result property="book_author" column="book_author"/>
            <result property="book_state" column="book_state"/>
            <result property="book_words" column="book_words"/>
            <result property="book_intro" column="book_intro"/>
            <result property="update_time" column="update_time"/>
            <result property="monthly_tickets" column="monthly_tickets"/>
            <result property="total_hits" column="total_hits"/>
            <result property="monthly_hits" column="monthly_hits"/>
            <result property="weekly_hits" column="weekly_hits"/>
            <result property="daily_hits" column="daily_hits"/>
            <result property="total_collections" column="total_collections"/>
            <result property="monthly_collections" column="monthly_collections"/>
            <result property="weekly_collections" column="weekly_collections"/>
            <result property="daily_collections" column="daily_collections"/>
            <result property="downloads" column="downloads"/>
            <collection property="book_type" ofType="cn.xy.novelwebproject.bean.Noveltype">
                <id property="id" column="id"/>
                <result property="typename" column="typename"/>
            </collection>
            <collection property="comments" ofType="cn.xy.novelwebproject.bean.Comment">
                <id property="id" column="cmid"/>
                <result property="comment_title" column="comment_title"/>
                <result property="comment_context" column="comment_context"/>
                <result property="comment_author" column="comment_author"/>
                <result property="comment_time" column="comment_time"/>
                <result property="comment_url" column="comment_url"/>
            </collection>
            <collection property="book_catalog" ofType="cn.xy.novelwebproject.bean.Catalog">
                <result property="novale_catalog" column="novale_catalog"/>
                <result property="novel_name" column="clnovel_name"/>
                <result property="updatetime" column="updatetime"/>
            </collection>
        </collection>
    </resultMap>
    <select id="selectByAuthorKey" parameterType="String" resultMap="allAuth">
        SELECT
            au.nick_name,
            au.sex,
            au.subscriptions,
            au.collections,
            au.concerns,
            au.fans,
            nv.book_name,
            nv.book_state,
            fm.user_name,
            fm.novle_name,
            fm.visit_time,
            nv.book_author,
            nv.book_words,
            nv.book_intro,
            nv.update_time,
            nv.monthly_tickets,
            nv.total_hits,
            nv.monthly_hits,
            nv.weekly_hits,
            nv.daily_hits,
            nv.total_collections,
            nv.monthly_collections,
            nv.weekly_collections,
            nv.daily_collections,
            nv.downloads,
            cl.novale_catalog,
            cl.novel_name AS clnovel_name,
            cl.updatetime,
            cm.id AS cmid,
            cm.comment_title,
            cm.comment_context,
            cm.comment_author,
            cm.comment_time,
            cm.comment_url,
            ntp.id,
            ntp.typename,
            au.`password`
        FROM author au
                 LEFT OUTER JOIN
             author_work_novel awn ON au.works = awn.novel_author
                 LEFT OUTER JOIN
             footmarks fm ON fm.user_name = au.footmark
                 LEFT OUTER JOIN
             novel nv ON awn.novel_name = nv.book_name
                 LEFT OUTER JOIN
             novel_type nt ON nv.book_name = nt.novel_name
                 LEFT OUTER JOIN
             noveltype ntp ON nt.type = ntp.typename
                 LEFT OUTER JOIN
             catalog cl ON nv.book_catalog = cl.novel_name
                 LEFT OUTER JOIN
             novel_comments nc ON nv.comments = nc.novel_name
                 LEFT OUTER JOIN
             usercomment cm ON nc.comment_id = cm.id
        where nick_name = #{nick_name}
    </select>
</mapper>